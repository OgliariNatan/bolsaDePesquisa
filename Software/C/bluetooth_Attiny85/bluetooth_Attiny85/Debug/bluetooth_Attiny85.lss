
bluetooth_Attiny85.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000007a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000100  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000060a  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000050f  00000000  00000000  000007a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fc  00000000  00000000  00000cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00000fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032f  00000000  00000000  00001054  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ca  00000000  00000000  00001383  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000144d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	2e c0       	rjmp	.+92     	; 0x62 <__vector_2>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	17 c0       	rjmp	.+46     	; 0x40 <__vector_8>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a0 36       	cpi	r26, 0x60	; 96
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	0c d0       	rcall	.+24     	; 0x54 <main>
  3c:	1c c0       	rjmp	.+56     	; 0x76 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <__vector_8>:
	DIDR0|=(1<<ADC0D);
	sei();
}

ISR(ADC_vect)//ADC_ADC_vect
{
  40:	1f 92       	push	r1
  42:	0f 92       	push	r0
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	0f 92       	push	r0
  48:	11 24       	eor	r1, r1
	//duty=0.15*ADCH;
	//uint8_t y;
	//y = ADCH;
	//duty=(int)(y);
	//OCR0B=duty;//output write
}
  4a:	0f 90       	pop	r0
  4c:	0f be       	out	0x3f, r0	; 63
  4e:	0f 90       	pop	r0
  50:	1f 90       	pop	r1
  52:	18 95       	reti

00000054 <main>:
		{
			rxReadPos = 0;
		}
	}
	return ret;
}
  54:	81 e1       	ldi	r24, 0x11	; 17
  56:	88 bb       	out	0x18, r24	; 24
  58:	80 e8       	ldi	r24, 0x80	; 128
  5a:	86 bd       	out	0x26, r24	; 38
  5c:	16 bc       	out	0x26, r1	; 38
  5e:	78 94       	sei
  60:	ff cf       	rjmp	.-2      	; 0x60 <main+0xc>

00000062 <__vector_2>:

#ifdef DEBUG
 //Adicionar uma comunicação serial
#endif // DEBUG
ISR(PCINT0_vect)//PCINT0_vect
{
  62:	1f 92       	push	r1
  64:	0f 92       	push	r0
  66:	0f b6       	in	r0, 0x3f	; 63
  68:	0f 92       	push	r0
  6a:	11 24       	eor	r1, r1
	//updateBlue(int *dados); //a implementar
	//uint8_t value;
	//value = 1;             // Increment volatile variable
  6c:	0f 90       	pop	r0
  6e:	0f be       	out	0x3f, r0	; 63
  70:	0f 90       	pop	r0
  72:	1f 90       	pop	r1
  74:	18 95       	reti

00000076 <_exit>:
  76:	f8 94       	cli

00000078 <__stop_program>:
  78:	ff cf       	rjmp	.-2      	; 0x78 <__stop_program>
