
why_not.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000764  000007f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000764  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010c  0080010c  00000804  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000834  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a3b  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b4  00000000  00000000  000023bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000914  00000000  00000000  00002d73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000033c  00000000  00000000  00003688  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000067f  00000000  00000000  000039c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e66  00000000  00000000  00004043  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004ea9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e6       	ldi	r30, 0x64	; 100
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  9e:	0c 94 b0 03 	jmp	0x760	; 0x760 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup_rf>:
	ADMUX = (1 << REFS0); // Aref = AVcc
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS0); //prescaler 128
	
	
	DDRC &= ~_BV(2); //INPUT
	PORTC |= _BV(2); //pull high
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	0e 94 e7 00 	call	0x1ce	; 0x1ce <nRF24L01_init>
  ae:	ec 01       	movw	r28, r24
  b0:	85 e2       	ldi	r24, 0x25	; 37
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	99 83       	std	Y+1, r25	; 0x01
  b6:	88 83       	st	Y, r24
  b8:	22 e0       	ldi	r18, 0x02	; 2
  ba:	2a 83       	std	Y+2, r18	; 0x02
  bc:	9c 83       	std	Y+4, r25	; 0x04
  be:	8b 83       	std	Y+3, r24	; 0x03
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	2d 83       	std	Y+5, r18	; 0x05
  c4:	9f 83       	std	Y+7, r25	; 0x07
  c6:	8e 83       	std	Y+6, r24	; 0x06
  c8:	25 e0       	ldi	r18, 0x05	; 5
  ca:	28 87       	std	Y+8, r18	; 0x08
  cc:	9a 87       	std	Y+10, r25	; 0x0a
  ce:	89 87       	std	Y+9, r24	; 0x09
  d0:	23 e0       	ldi	r18, 0x03	; 3
  d2:	2b 87       	std	Y+11, r18	; 0x0b
  d4:	9d 87       	std	Y+13, r25	; 0x0d
  d6:	8c 87       	std	Y+12, r24	; 0x0c
  d8:	84 e0       	ldi	r24, 0x04	; 4
  da:	8e 87       	std	Y+14, r24	; 0x0e
  dc:	e9 e6       	ldi	r30, 0x69	; 105
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	80 83       	st	Z, r24
  e6:	e8 9a       	sbi	0x1d, 0	; 29
  e8:	ce 01       	movw	r24, r28
  ea:	0e 94 9e 01 	call	0x33c	; 0x33c <nRF24L01_begin>
  ee:	ce 01       	movw	r24, r28
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <__vector_11>:
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	8f 93       	push	r24
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 108:	8f 91       	pop	r24
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <__vector_1>:
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	8f 93       	push	r24
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <rf_interrupt>
 126:	8f 91       	pop	r24
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <initIO>:
 132:	17 b8       	out	0x07, r1	; 7
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	88 b9       	out	0x08, r24	; 8
 138:	08 95       	ret

0000013a <readADC>:
	//...
	};
	
int readADC(uint8_t val){
	ADMUX = (1 << REFS0) | (val & 0x0f);
 13a:	8f 70       	andi	r24, 0x0F	; 15
 13c:	80 64       	ori	r24, 0x40	; 64
 13e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADSC);
 142:	ea e7       	ldi	r30, 0x7A	; 122
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	80 64       	ori	r24, 0x40	; 64
 14a:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC));
 14c:	80 81       	ld	r24, Z
 14e:	86 fd       	sbrc	r24, 6
 150:	fd cf       	rjmp	.-6      	; 0x14c <readADC+0x12>
	return ADCW;
 152:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 156:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 15a:	08 95       	ret

0000015c <main>:
volatile bool rf_interrupt = false;
volatile bool send_message = false;


int main(void)
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
 164:	2a 97       	sbiw	r28, 0x0a	; 10
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	f8 94       	cli
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	cd bf       	out	0x3d, r28	; 61
	uint8_t address[5] = { 0x01, 0x01, 0x01, 0x01, 0x01 };
 170:	85 e0       	ldi	r24, 0x05	; 5
 172:	e6 e0       	ldi	r30, 0x06	; 6
 174:	f1 e0       	ldi	r31, 0x01	; 1
 176:	de 01       	movw	r26, r28
 178:	11 96       	adiw	r26, 0x01	; 1
 17a:	01 90       	ld	r0, Z+
 17c:	0d 92       	st	X+, r0
 17e:	8a 95       	dec	r24
 180:	e1 f7       	brne	.-8      	; 0x17a <main+0x1e>
	uint8_t val = 0;
	initIO();
 182:	0e 94 99 00 	call	0x132	; 0x132 <initIO>
    sei();
 186:	78 94       	sei
    
	nRF24L01 *rf = setup_rf(); //configura os pinos do modulo nrf24l01
 188:	0e 94 53 00 	call	0xa6	; 0xa6 <setup_rf>
 18c:	8c 01       	movw	r16, r24
    nRF24L01_listen(rf, 0, address); //configura o modulo para leitura com endereços pré estabelecidos
 18e:	ae 01       	movw	r20, r28
 190:	4f 5f       	subi	r20, 0xFF	; 255
 192:	5f 4f       	sbci	r21, 0xFF	; 255
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	0e 94 33 01 	call	0x266	; 0x266 <nRF24L01_listen>
    uint8_t addr[5];
	uint8_t CONFIG = 0; //VERIFICAR APAGAR
    nRF24L01_read_register(rf, CONFIG, addr, 1);//configura a verificação das mensagem
 19c:	21 e0       	ldi	r18, 0x01	; 1
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	ae 01       	movw	r20, r28
 1a2:	4a 5f       	subi	r20, 0xFA	; 250
 1a4:	5f 4f       	sbci	r21, 0xFF	; 255
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	c8 01       	movw	r24, r16
 1aa:	0e 94 30 01 	call	0x260	; 0x260 <nRF24L01_read_register>
	
		
    while (1) {
		val = readADC(0); //pino 0 das ADC
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	0e 94 9d 00 	call	0x13a	; 0x13a <readADC>
		
		
    }
 1b4:	fc cf       	rjmp	.-8      	; 0x1ae <main+0x52>

000001b6 <copy_address>:
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
    config &= ~_BV(PRIM_RX);
    nRF24L01_write_register(rf, CONFIG, &config, 1);
    set_high(rf->ce);
}
 1b6:	fc 01       	movw	r30, r24
 1b8:	a6 2f       	mov	r26, r22
 1ba:	b7 2f       	mov	r27, r23
 1bc:	9c 01       	movw	r18, r24
 1be:	2b 5f       	subi	r18, 0xFB	; 251
 1c0:	3f 4f       	sbci	r19, 0xFF	; 255
 1c2:	91 91       	ld	r25, Z+
 1c4:	9d 93       	st	X+, r25
 1c6:	e2 17       	cp	r30, r18
 1c8:	f3 07       	cpc	r31, r19
 1ca:	d9 f7       	brne	.-10     	; 0x1c2 <copy_address+0xc>
 1cc:	08 95       	ret

000001ce <nRF24L01_init>:
 1ce:	80 e1       	ldi	r24, 0x10	; 16
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 83 02 	call	0x506	; 0x506 <malloc>
 1d6:	20 e1       	ldi	r18, 0x10	; 16
 1d8:	fc 01       	movw	r30, r24
 1da:	11 92       	st	Z+, r1
 1dc:	2a 95       	dec	r18
 1de:	e9 f7       	brne	.-6      	; 0x1da <nRF24L01_init+0xc>
 1e0:	08 95       	ret

000001e2 <nRF24L01_send_command>:
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	ec 01       	movw	r28, r24
 1e8:	da 01       	movw	r26, r20
 1ea:	e8 81       	ld	r30, Y
 1ec:	f9 81       	ldd	r31, Y+1	; 0x01
 1ee:	50 81       	ld	r21, Z
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0a 80       	ldd	r0, Y+2	; 0x02
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <nRF24L01_send_command+0x1a>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	0a 94       	dec	r0
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <nRF24L01_send_command+0x16>
 200:	80 95       	com	r24
 202:	85 23       	and	r24, r21
 204:	80 83       	st	Z, r24
 206:	6e bd       	out	0x2e, r22	; 46
 208:	0d b4       	in	r0, 0x2d	; 45
 20a:	07 fe       	sbrs	r0, 7
 20c:	fd cf       	rjmp	.-6      	; 0x208 <nRF24L01_send_command+0x26>
 20e:	8e b5       	in	r24, 0x2e	; 46
 210:	8f 87       	std	Y+15, r24	; 0x0f
 212:	21 15       	cp	r18, r1
 214:	31 05       	cpc	r19, r1
 216:	79 f0       	breq	.+30     	; 0x236 <nRF24L01_send_command+0x54>
 218:	fd 01       	movw	r30, r26
 21a:	2a 0f       	add	r18, r26
 21c:	3b 1f       	adc	r19, r27
 21e:	df 01       	movw	r26, r30
 220:	90 81       	ld	r25, Z
 222:	9e bd       	out	0x2e, r25	; 46
 224:	0d b4       	in	r0, 0x2d	; 45
 226:	07 fe       	sbrs	r0, 7
 228:	fd cf       	rjmp	.-6      	; 0x224 <nRF24L01_send_command+0x42>
 22a:	9e b5       	in	r25, 0x2e	; 46
 22c:	9c 93       	st	X, r25
 22e:	31 96       	adiw	r30, 0x01	; 1
 230:	e2 17       	cp	r30, r18
 232:	f3 07       	cpc	r31, r19
 234:	a1 f7       	brne	.-24     	; 0x21e <nRF24L01_send_command+0x3c>
 236:	e8 81       	ld	r30, Y
 238:	f9 81       	ldd	r31, Y+1	; 0x01
 23a:	20 81       	ld	r18, Z
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0a 80       	ldd	r0, Y+2	; 0x02
 242:	02 c0       	rjmp	.+4      	; 0x248 <nRF24L01_send_command+0x66>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	0a 94       	dec	r0
 24a:	e2 f7       	brpl	.-8      	; 0x244 <nRF24L01_send_command+0x62>
 24c:	82 2b       	or	r24, r18
 24e:	80 83       	st	Z, r24
 250:	8f 85       	ldd	r24, Y+15	; 0x0f
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <nRF24L01_write_register>:
 258:	60 62       	ori	r22, 0x20	; 32
 25a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <nRF24L01_send_command>
 25e:	08 95       	ret

00000260 <nRF24L01_read_register>:
 260:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <nRF24L01_send_command>
 264:	08 95       	ret

00000266 <nRF24L01_listen>:
 266:	df 92       	push	r13
 268:	ef 92       	push	r14
 26a:	ff 92       	push	r15
 26c:	0f 93       	push	r16
 26e:	1f 93       	push	r17
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	00 d0       	rcall	.+0      	; 0x276 <nRF24L01_listen+0x10>
 276:	00 d0       	rcall	.+0      	; 0x278 <nRF24L01_listen+0x12>
 278:	00 d0       	rcall	.+0      	; 0x27a <nRF24L01_listen+0x14>
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
 27e:	7c 01       	movw	r14, r24
 280:	d6 2e       	mov	r13, r22
 282:	ca 01       	movw	r24, r20
 284:	be 01       	movw	r22, r28
 286:	6f 5f       	subi	r22, 0xFF	; 255
 288:	7f 4f       	sbci	r23, 0xFF	; 255
 28a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <copy_address>
 28e:	6a e0       	ldi	r22, 0x0A	; 10
 290:	6d 0d       	add	r22, r13
 292:	25 e0       	ldi	r18, 0x05	; 5
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	ae 01       	movw	r20, r28
 298:	4f 5f       	subi	r20, 0xFF	; 255
 29a:	5f 4f       	sbci	r21, 0xFF	; 255
 29c:	c7 01       	movw	r24, r14
 29e:	0e 94 2c 01 	call	0x258	; 0x258 <nRF24L01_write_register>
 2a2:	21 e0       	ldi	r18, 0x01	; 1
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	ae 01       	movw	r20, r28
 2a8:	4a 5f       	subi	r20, 0xFA	; 250
 2aa:	5f 4f       	sbci	r21, 0xFF	; 255
 2ac:	62 e0       	ldi	r22, 0x02	; 2
 2ae:	c7 01       	movw	r24, r14
 2b0:	0e 94 30 01 	call	0x260	; 0x260 <nRF24L01_read_register>
 2b4:	01 e0       	ldi	r16, 0x01	; 1
 2b6:	10 e0       	ldi	r17, 0x00	; 0
 2b8:	c8 01       	movw	r24, r16
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <nRF24L01_listen+0x5a>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	da 94       	dec	r13
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <nRF24L01_listen+0x56>
 2c4:	9e 81       	ldd	r25, Y+6	; 0x06
 2c6:	89 2b       	or	r24, r25
 2c8:	8e 83       	std	Y+6, r24	; 0x06
 2ca:	21 e0       	ldi	r18, 0x01	; 1
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	ae 01       	movw	r20, r28
 2d0:	4a 5f       	subi	r20, 0xFA	; 250
 2d2:	5f 4f       	sbci	r21, 0xFF	; 255
 2d4:	62 e0       	ldi	r22, 0x02	; 2
 2d6:	c7 01       	movw	r24, r14
 2d8:	0e 94 2c 01 	call	0x258	; 0x258 <nRF24L01_write_register>
 2dc:	d7 01       	movw	r26, r14
 2de:	13 96       	adiw	r26, 0x03	; 3
 2e0:	ed 91       	ld	r30, X+
 2e2:	fc 91       	ld	r31, X
 2e4:	14 97       	sbiw	r26, 0x04	; 4
 2e6:	80 81       	ld	r24, Z
 2e8:	15 96       	adiw	r26, 0x05	; 5
 2ea:	0c 90       	ld	r0, X
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <nRF24L01_listen+0x8c>
 2ee:	00 0f       	add	r16, r16
 2f0:	11 1f       	adc	r17, r17
 2f2:	0a 94       	dec	r0
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <nRF24L01_listen+0x88>
 2f6:	08 2b       	or	r16, r24
 2f8:	00 83       	st	Z, r16
 2fa:	26 96       	adiw	r28, 0x06	; 6
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	f8 94       	cli
 300:	de bf       	out	0x3e, r29	; 62
 302:	0f be       	out	0x3f, r0	; 63
 304:	cd bf       	out	0x3d, r28	; 61
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	1f 91       	pop	r17
 30c:	0f 91       	pop	r16
 30e:	ff 90       	pop	r15
 310:	ef 90       	pop	r14
 312:	df 90       	pop	r13
 314:	08 95       	ret

00000316 <nRF24L01_clear_interrupts>:

void nRF24L01_clear_interrupts(nRF24L01 *rf) {
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	1f 92       	push	r1
 31c:	cd b7       	in	r28, 0x3d	; 61
 31e:	de b7       	in	r29, 0x3e	; 62
    uint8_t data = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
 320:	20 e7       	ldi	r18, 0x70	; 112
 322:	29 83       	std	Y+1, r18	; 0x01
    nRF24L01_write_register(rf, STATUS, &data, 1);
 324:	21 e0       	ldi	r18, 0x01	; 1
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	ae 01       	movw	r20, r28
 32a:	4f 5f       	subi	r20, 0xFF	; 255
 32c:	5f 4f       	sbci	r21, 0xFF	; 255
 32e:	67 e0       	ldi	r22, 0x07	; 7
 330:	0e 94 2c 01 	call	0x258	; 0x258 <nRF24L01_write_register>
}
 334:	0f 90       	pop	r0
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	08 95       	ret

0000033c <nRF24L01_begin>:
    nRF24L01 *rf = malloc(sizeof(nRF24L01));
    memset(rf, 0, sizeof(nRF24L01));
    return rf;
}

void nRF24L01_begin(nRF24L01 *rf) {
 33c:	ff 92       	push	r15
 33e:	0f 93       	push	r16
 340:	1f 93       	push	r17
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	1f 92       	push	r1
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
 34c:	8c 01       	movw	r16, r24
        destination[i] = source[i];
}

inline static void set_as_output(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr |= _BV(pin.pin);
 34e:	dc 01       	movw	r26, r24
 350:	ed 91       	ld	r30, X+
 352:	fc 91       	ld	r31, X
 354:	11 97       	sbiw	r26, 0x01	; 1
 356:	42 91       	ld	r20, -Z
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	9c 01       	movw	r18, r24
 35e:	12 96       	adiw	r26, 0x02	; 2
 360:	0c 90       	ld	r0, X
 362:	12 97       	sbiw	r26, 0x02	; 2
 364:	02 c0       	rjmp	.+4      	; 0x36a <nRF24L01_begin+0x2e>
 366:	22 0f       	add	r18, r18
 368:	33 1f       	adc	r19, r19
 36a:	0a 94       	dec	r0
 36c:	e2 f7       	brpl	.-8      	; 0x366 <nRF24L01_begin+0x2a>
 36e:	24 2b       	or	r18, r20
 370:	20 83       	st	Z, r18
 372:	13 96       	adiw	r26, 0x03	; 3
 374:	ed 91       	ld	r30, X+
 376:	fc 91       	ld	r31, X
 378:	14 97       	sbiw	r26, 0x04	; 4
 37a:	42 91       	ld	r20, -Z
 37c:	9c 01       	movw	r18, r24
 37e:	15 96       	adiw	r26, 0x05	; 5
 380:	0c 90       	ld	r0, X
 382:	15 97       	sbiw	r26, 0x05	; 5
 384:	02 c0       	rjmp	.+4      	; 0x38a <nRF24L01_begin+0x4e>
 386:	22 0f       	add	r18, r18
 388:	33 1f       	adc	r19, r19
 38a:	0a 94       	dec	r0
 38c:	e2 f7       	brpl	.-8      	; 0x386 <nRF24L01_begin+0x4a>
 38e:	24 2b       	or	r18, r20
 390:	20 83       	st	Z, r18
 392:	ed 91       	ld	r30, X+
 394:	fc 91       	ld	r31, X
 396:	11 97       	sbiw	r26, 0x01	; 1
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
}

inline static void set_high(gpio_pin pin) {
    *pin.port |= _BV(pin.pin);
 398:	40 81       	ld	r20, Z
 39a:	9c 01       	movw	r18, r24
 39c:	12 96       	adiw	r26, 0x02	; 2
 39e:	0c 90       	ld	r0, X
 3a0:	12 97       	sbiw	r26, 0x02	; 2
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <nRF24L01_begin+0x6c>
 3a4:	22 0f       	add	r18, r18
 3a6:	33 1f       	adc	r19, r19
 3a8:	0a 94       	dec	r0
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <nRF24L01_begin+0x68>
 3ac:	24 2b       	or	r18, r20
 3ae:	20 83       	st	Z, r18
 3b0:	13 96       	adiw	r26, 0x03	; 3
 3b2:	ed 91       	ld	r30, X+
 3b4:	fc 91       	ld	r31, X
 3b6:	14 97       	sbiw	r26, 0x04	; 4
}

inline static void set_low(gpio_pin pin) {
    *pin.port &= ~_BV(pin.pin);
 3b8:	30 81       	ld	r19, Z
 3ba:	ac 01       	movw	r20, r24
 3bc:	15 96       	adiw	r26, 0x05	; 5
 3be:	0c 90       	ld	r0, X
 3c0:	15 97       	sbiw	r26, 0x05	; 5
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <nRF24L01_begin+0x8c>
 3c4:	44 0f       	add	r20, r20
 3c6:	55 1f       	adc	r21, r21
 3c8:	0a 94       	dec	r0
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <nRF24L01_begin+0x88>
 3cc:	24 2f       	mov	r18, r20
 3ce:	20 95       	com	r18
 3d0:	23 23       	and	r18, r19
 3d2:	20 83       	st	Z, r18
}

static void spi_init(nRF24L01 *rf) {
    // set as master
    SPCR |= _BV(MSTR);
 3d4:	2c b5       	in	r18, 0x2c	; 44
 3d6:	20 61       	ori	r18, 0x10	; 16
 3d8:	2c bd       	out	0x2c, r18	; 44
    // enable SPI
    SPCR |= _BV(SPE);
 3da:	2c b5       	in	r18, 0x2c	; 44
 3dc:	20 64       	ori	r18, 0x40	; 64
 3de:	2c bd       	out	0x2c, r18	; 44
        destination[i] = source[i];
}

inline static void set_as_output(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr |= _BV(pin.pin);
 3e0:	16 96       	adiw	r26, 0x06	; 6
 3e2:	ed 91       	ld	r30, X+
 3e4:	fc 91       	ld	r31, X
 3e6:	17 97       	sbiw	r26, 0x07	; 7
 3e8:	42 91       	ld	r20, -Z
 3ea:	9c 01       	movw	r18, r24
 3ec:	18 96       	adiw	r26, 0x08	; 8
 3ee:	0c 90       	ld	r0, X
 3f0:	18 97       	sbiw	r26, 0x08	; 8
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <nRF24L01_begin+0xbc>
 3f4:	22 0f       	add	r18, r18
 3f6:	33 1f       	adc	r19, r19
 3f8:	0a 94       	dec	r0
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <nRF24L01_begin+0xb8>
 3fc:	24 2b       	or	r18, r20
 3fe:	20 83       	st	Z, r18
 400:	19 96       	adiw	r26, 0x09	; 9
 402:	ed 91       	ld	r30, X+
 404:	fc 91       	ld	r31, X
 406:	1a 97       	sbiw	r26, 0x0a	; 10
 408:	42 91       	ld	r20, -Z
 40a:	9c 01       	movw	r18, r24
 40c:	1b 96       	adiw	r26, 0x0b	; 11
 40e:	0c 90       	ld	r0, X
 410:	1b 97       	sbiw	r26, 0x0b	; 11
 412:	02 c0       	rjmp	.+4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 414:	22 0f       	add	r18, r18
 416:	33 1f       	adc	r19, r19
 418:	0a 94       	dec	r0
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 41c:	24 2b       	or	r18, r20
 41e:	20 83       	st	Z, r18
}

inline static void set_as_input(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
 420:	1c 96       	adiw	r26, 0x0c	; 12
 422:	ed 91       	ld	r30, X+
 424:	fc 91       	ld	r31, X
 426:	1d 97       	sbiw	r26, 0x0d	; 13
 428:	22 91       	ld	r18, -Z
 42a:	1e 96       	adiw	r26, 0x0e	; 14
 42c:	0c 90       	ld	r0, X
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	0a 94       	dec	r0
 436:	e2 f7       	brpl	.-8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 438:	80 95       	com	r24
 43a:	82 23       	and	r24, r18
 43c:	80 83       	st	Z, r24
    // MISO pin automatically overrides to input
    set_as_output(rf->sck);
    set_as_output(rf->mosi);
    set_as_input(rf->miso);
    // SPI mode 0: Clock Polarity CPOL = 0, Clock Phase CPHA = 0
    SPCR &= ~_BV(CPOL);
 43e:	8c b5       	in	r24, 0x2c	; 44
 440:	87 7f       	andi	r24, 0xF7	; 247
 442:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~_BV(CPHA);
 444:	8c b5       	in	r24, 0x2c	; 44
 446:	8b 7f       	andi	r24, 0xFB	; 251
 448:	8c bd       	out	0x2c, r24	; 44
    // Clock 2X speed
    SPCR &= ~_BV(SPR0);
 44a:	8c b5       	in	r24, 0x2c	; 44
 44c:	8e 7f       	andi	r24, 0xFE	; 254
 44e:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~_BV(SPR1);
 450:	8c b5       	in	r24, 0x2c	; 44
 452:	8d 7f       	andi	r24, 0xFD	; 253
 454:	8c bd       	out	0x2c, r24	; 44
    SPSR |= _BV(SPI2X);
 456:	8d b5       	in	r24, 0x2d	; 45
 458:	81 60       	ori	r24, 0x01	; 1
 45a:	8d bd       	out	0x2d, r24	; 45
    // most significant first (MSB)
    SPCR &= ~_BV(DORD);
 45c:	8c b5       	in	r24, 0x2c	; 44
 45e:	8f 7d       	andi	r24, 0xDF	; 223
 460:	8c bd       	out	0x2c, r24	; 44
    set_high(rf->ss);
    set_low(rf->ce);

    spi_init(rf);

    nRF24L01_send_command(rf, FLUSH_RX, NULL, 0);
 462:	20 e0       	ldi	r18, 0x00	; 0
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	40 e0       	ldi	r20, 0x00	; 0
 468:	50 e0       	ldi	r21, 0x00	; 0
 46a:	62 ee       	ldi	r22, 0xE2	; 226
 46c:	c8 01       	movw	r24, r16
 46e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <nRF24L01_send_command>
    nRF24L01_send_command(rf, FLUSH_TX, NULL, 0);
 472:	20 e0       	ldi	r18, 0x00	; 0
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	40 e0       	ldi	r20, 0x00	; 0
 478:	50 e0       	ldi	r21, 0x00	; 0
 47a:	61 ee       	ldi	r22, 0xE1	; 225
 47c:	c8 01       	movw	r24, r16
 47e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <nRF24L01_send_command>
    nRF24L01_clear_interrupts(rf);
 482:	c8 01       	movw	r24, r16
 484:	0e 94 8b 01 	call	0x316	; 0x316 <nRF24L01_clear_interrupts>

    uint8_t data;
    data = _BV(EN_CRC) | _BV(CRCO) | _BV(PWR_UP) | _BV(PRIM_RX);
 488:	8f e0       	ldi	r24, 0x0F	; 15
 48a:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, CONFIG, &data, 1);
 48c:	21 e0       	ldi	r18, 0x01	; 1
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	ae 01       	movw	r20, r28
 492:	4f 5f       	subi	r20, 0xFF	; 255
 494:	5f 4f       	sbci	r21, 0xFF	; 255
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	c8 01       	movw	r24, r16
 49a:	0e 94 2c 01 	call	0x258	; 0x258 <nRF24L01_write_register>

    // enable Auto Acknowlegde on all pipes
    data = _BV(ENAA_P0) | _BV(ENAA_P1) | _BV(ENAA_P2)
 49e:	0f 2e       	mov	r0, r31
 4a0:	ff e3       	ldi	r31, 0x3F	; 63
 4a2:	ff 2e       	mov	r15, r31
 4a4:	f0 2d       	mov	r31, r0
 4a6:	f9 82       	std	Y+1, r15	; 0x01
         | _BV(ENAA_P3) | _BV(ENAA_P4) | _BV(ENAA_P5);
    nRF24L01_write_register(rf, EN_AA, &data, 1);
 4a8:	21 e0       	ldi	r18, 0x01	; 1
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	ae 01       	movw	r20, r28
 4ae:	4f 5f       	subi	r20, 0xFF	; 255
 4b0:	5f 4f       	sbci	r21, 0xFF	; 255
 4b2:	61 e0       	ldi	r22, 0x01	; 1
 4b4:	c8 01       	movw	r24, r16
 4b6:	0e 94 2c 01 	call	0x258	; 0x258 <nRF24L01_write_register>

    // enable Dynamic Payload on al pipes
    data = _BV(DPL_P0) | _BV(DPL_P1) | _BV(DPL_P2)
 4ba:	f9 82       	std	Y+1, r15	; 0x01
         | _BV(DPL_P3) | _BV(DPL_P4) | _BV(DPL_P5);
    nRF24L01_write_register(rf, DYNPD, &data, 1);
 4bc:	21 e0       	ldi	r18, 0x01	; 1
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	ae 01       	movw	r20, r28
 4c2:	4f 5f       	subi	r20, 0xFF	; 255
 4c4:	5f 4f       	sbci	r21, 0xFF	; 255
 4c6:	6c e1       	ldi	r22, 0x1C	; 28
 4c8:	c8 01       	movw	r24, r16
 4ca:	0e 94 2c 01 	call	0x258	; 0x258 <nRF24L01_write_register>

    // enable Dynamic Payload (global)
    data = _BV(EN_DPL);
 4ce:	84 e0       	ldi	r24, 0x04	; 4
 4d0:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, FEATURE, &data, 1);
 4d2:	21 e0       	ldi	r18, 0x01	; 1
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	ae 01       	movw	r20, r28
 4d8:	4f 5f       	subi	r20, 0xFF	; 255
 4da:	5f 4f       	sbci	r21, 0xFF	; 255
 4dc:	6d e1       	ldi	r22, 0x1D	; 29
 4de:	c8 01       	movw	r24, r16
 4e0:	0e 94 2c 01 	call	0x258	; 0x258 <nRF24L01_write_register>

    // disable all rx addresses
    data = 0;
 4e4:	19 82       	std	Y+1, r1	; 0x01
    nRF24L01_write_register(rf, EN_RXADDR, &data, 1);
 4e6:	21 e0       	ldi	r18, 0x01	; 1
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	ae 01       	movw	r20, r28
 4ec:	4f 5f       	subi	r20, 0xFF	; 255
 4ee:	5f 4f       	sbci	r21, 0xFF	; 255
 4f0:	62 e0       	ldi	r22, 0x02	; 2
 4f2:	c8 01       	movw	r24, r16
 4f4:	0e 94 2c 01 	call	0x258	; 0x258 <nRF24L01_write_register>
}
 4f8:	0f 90       	pop	r0
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	1f 91       	pop	r17
 500:	0f 91       	pop	r16
 502:	ff 90       	pop	r15
 504:	08 95       	ret

00000506 <malloc>:
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	82 30       	cpi	r24, 0x02	; 2
 50c:	91 05       	cpc	r25, r1
 50e:	10 f4       	brcc	.+4      	; 0x514 <malloc+0xe>
 510:	82 e0       	ldi	r24, 0x02	; 2
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__flp>
 518:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <__flp+0x1>
 51c:	20 e0       	ldi	r18, 0x00	; 0
 51e:	30 e0       	ldi	r19, 0x00	; 0
 520:	c0 e0       	ldi	r28, 0x00	; 0
 522:	d0 e0       	ldi	r29, 0x00	; 0
 524:	30 97       	sbiw	r30, 0x00	; 0
 526:	11 f1       	breq	.+68     	; 0x56c <malloc+0x66>
 528:	40 81       	ld	r20, Z
 52a:	51 81       	ldd	r21, Z+1	; 0x01
 52c:	48 17       	cp	r20, r24
 52e:	59 07       	cpc	r21, r25
 530:	c0 f0       	brcs	.+48     	; 0x562 <malloc+0x5c>
 532:	48 17       	cp	r20, r24
 534:	59 07       	cpc	r21, r25
 536:	61 f4       	brne	.+24     	; 0x550 <malloc+0x4a>
 538:	82 81       	ldd	r24, Z+2	; 0x02
 53a:	93 81       	ldd	r25, Z+3	; 0x03
 53c:	20 97       	sbiw	r28, 0x00	; 0
 53e:	19 f0       	breq	.+6      	; 0x546 <malloc+0x40>
 540:	9b 83       	std	Y+3, r25	; 0x03
 542:	8a 83       	std	Y+2, r24	; 0x02
 544:	2b c0       	rjmp	.+86     	; 0x59c <malloc+0x96>
 546:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__flp+0x1>
 54a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__flp>
 54e:	26 c0       	rjmp	.+76     	; 0x59c <malloc+0x96>
 550:	21 15       	cp	r18, r1
 552:	31 05       	cpc	r19, r1
 554:	19 f0       	breq	.+6      	; 0x55c <malloc+0x56>
 556:	42 17       	cp	r20, r18
 558:	53 07       	cpc	r21, r19
 55a:	18 f4       	brcc	.+6      	; 0x562 <malloc+0x5c>
 55c:	9a 01       	movw	r18, r20
 55e:	be 01       	movw	r22, r28
 560:	df 01       	movw	r26, r30
 562:	ef 01       	movw	r28, r30
 564:	02 80       	ldd	r0, Z+2	; 0x02
 566:	f3 81       	ldd	r31, Z+3	; 0x03
 568:	e0 2d       	mov	r30, r0
 56a:	dc cf       	rjmp	.-72     	; 0x524 <malloc+0x1e>
 56c:	21 15       	cp	r18, r1
 56e:	31 05       	cpc	r19, r1
 570:	09 f1       	breq	.+66     	; 0x5b4 <malloc+0xae>
 572:	28 1b       	sub	r18, r24
 574:	39 0b       	sbc	r19, r25
 576:	24 30       	cpi	r18, 0x04	; 4
 578:	31 05       	cpc	r19, r1
 57a:	90 f4       	brcc	.+36     	; 0x5a0 <malloc+0x9a>
 57c:	12 96       	adiw	r26, 0x02	; 2
 57e:	8d 91       	ld	r24, X+
 580:	9c 91       	ld	r25, X
 582:	13 97       	sbiw	r26, 0x03	; 3
 584:	61 15       	cp	r22, r1
 586:	71 05       	cpc	r23, r1
 588:	21 f0       	breq	.+8      	; 0x592 <malloc+0x8c>
 58a:	fb 01       	movw	r30, r22
 58c:	93 83       	std	Z+3, r25	; 0x03
 58e:	82 83       	std	Z+2, r24	; 0x02
 590:	04 c0       	rjmp	.+8      	; 0x59a <malloc+0x94>
 592:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__flp+0x1>
 596:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__flp>
 59a:	fd 01       	movw	r30, r26
 59c:	32 96       	adiw	r30, 0x02	; 2
 59e:	44 c0       	rjmp	.+136    	; 0x628 <malloc+0x122>
 5a0:	fd 01       	movw	r30, r26
 5a2:	e2 0f       	add	r30, r18
 5a4:	f3 1f       	adc	r31, r19
 5a6:	81 93       	st	Z+, r24
 5a8:	91 93       	st	Z+, r25
 5aa:	22 50       	subi	r18, 0x02	; 2
 5ac:	31 09       	sbc	r19, r1
 5ae:	2d 93       	st	X+, r18
 5b0:	3c 93       	st	X, r19
 5b2:	3a c0       	rjmp	.+116    	; 0x628 <malloc+0x122>
 5b4:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__brkval>
 5b8:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__brkval+0x1>
 5bc:	23 2b       	or	r18, r19
 5be:	41 f4       	brne	.+16     	; 0x5d0 <malloc+0xca>
 5c0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 5c4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 5c8:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <__brkval+0x1>
 5cc:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <__brkval>
 5d0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 5d4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 5d8:	21 15       	cp	r18, r1
 5da:	31 05       	cpc	r19, r1
 5dc:	41 f4       	brne	.+16     	; 0x5ee <malloc+0xe8>
 5de:	2d b7       	in	r18, 0x3d	; 61
 5e0:	3e b7       	in	r19, 0x3e	; 62
 5e2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 5e6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 5ea:	24 1b       	sub	r18, r20
 5ec:	35 0b       	sbc	r19, r21
 5ee:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <__brkval>
 5f2:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <__brkval+0x1>
 5f6:	e2 17       	cp	r30, r18
 5f8:	f3 07       	cpc	r31, r19
 5fa:	a0 f4       	brcc	.+40     	; 0x624 <malloc+0x11e>
 5fc:	2e 1b       	sub	r18, r30
 5fe:	3f 0b       	sbc	r19, r31
 600:	28 17       	cp	r18, r24
 602:	39 07       	cpc	r19, r25
 604:	78 f0       	brcs	.+30     	; 0x624 <malloc+0x11e>
 606:	ac 01       	movw	r20, r24
 608:	4e 5f       	subi	r20, 0xFE	; 254
 60a:	5f 4f       	sbci	r21, 0xFF	; 255
 60c:	24 17       	cp	r18, r20
 60e:	35 07       	cpc	r19, r21
 610:	48 f0       	brcs	.+18     	; 0x624 <malloc+0x11e>
 612:	4e 0f       	add	r20, r30
 614:	5f 1f       	adc	r21, r31
 616:	50 93 0f 01 	sts	0x010F, r21	; 0x80010f <__brkval+0x1>
 61a:	40 93 0e 01 	sts	0x010E, r20	; 0x80010e <__brkval>
 61e:	81 93       	st	Z+, r24
 620:	91 93       	st	Z+, r25
 622:	02 c0       	rjmp	.+4      	; 0x628 <malloc+0x122>
 624:	e0 e0       	ldi	r30, 0x00	; 0
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	cf 01       	movw	r24, r30
 62a:	df 91       	pop	r29
 62c:	cf 91       	pop	r28
 62e:	08 95       	ret

00000630 <free>:
 630:	0f 93       	push	r16
 632:	1f 93       	push	r17
 634:	cf 93       	push	r28
 636:	df 93       	push	r29
 638:	00 97       	sbiw	r24, 0x00	; 0
 63a:	09 f4       	brne	.+2      	; 0x63e <free+0xe>
 63c:	8c c0       	rjmp	.+280    	; 0x756 <free+0x126>
 63e:	fc 01       	movw	r30, r24
 640:	32 97       	sbiw	r30, 0x02	; 2
 642:	13 82       	std	Z+3, r1	; 0x03
 644:	12 82       	std	Z+2, r1	; 0x02
 646:	00 91 10 01 	lds	r16, 0x0110	; 0x800110 <__flp>
 64a:	10 91 11 01 	lds	r17, 0x0111	; 0x800111 <__flp+0x1>
 64e:	01 15       	cp	r16, r1
 650:	11 05       	cpc	r17, r1
 652:	81 f4       	brne	.+32     	; 0x674 <free+0x44>
 654:	20 81       	ld	r18, Z
 656:	31 81       	ldd	r19, Z+1	; 0x01
 658:	82 0f       	add	r24, r18
 65a:	93 1f       	adc	r25, r19
 65c:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__brkval>
 660:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__brkval+0x1>
 664:	28 17       	cp	r18, r24
 666:	39 07       	cpc	r19, r25
 668:	79 f5       	brne	.+94     	; 0x6c8 <free+0x98>
 66a:	f0 93 0f 01 	sts	0x010F, r31	; 0x80010f <__brkval+0x1>
 66e:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <__brkval>
 672:	71 c0       	rjmp	.+226    	; 0x756 <free+0x126>
 674:	d8 01       	movw	r26, r16
 676:	40 e0       	ldi	r20, 0x00	; 0
 678:	50 e0       	ldi	r21, 0x00	; 0
 67a:	ae 17       	cp	r26, r30
 67c:	bf 07       	cpc	r27, r31
 67e:	50 f4       	brcc	.+20     	; 0x694 <free+0x64>
 680:	12 96       	adiw	r26, 0x02	; 2
 682:	2d 91       	ld	r18, X+
 684:	3c 91       	ld	r19, X
 686:	13 97       	sbiw	r26, 0x03	; 3
 688:	ad 01       	movw	r20, r26
 68a:	21 15       	cp	r18, r1
 68c:	31 05       	cpc	r19, r1
 68e:	09 f1       	breq	.+66     	; 0x6d2 <free+0xa2>
 690:	d9 01       	movw	r26, r18
 692:	f3 cf       	rjmp	.-26     	; 0x67a <free+0x4a>
 694:	9d 01       	movw	r18, r26
 696:	da 01       	movw	r26, r20
 698:	33 83       	std	Z+3, r19	; 0x03
 69a:	22 83       	std	Z+2, r18	; 0x02
 69c:	60 81       	ld	r22, Z
 69e:	71 81       	ldd	r23, Z+1	; 0x01
 6a0:	86 0f       	add	r24, r22
 6a2:	97 1f       	adc	r25, r23
 6a4:	82 17       	cp	r24, r18
 6a6:	93 07       	cpc	r25, r19
 6a8:	69 f4       	brne	.+26     	; 0x6c4 <free+0x94>
 6aa:	ec 01       	movw	r28, r24
 6ac:	28 81       	ld	r18, Y
 6ae:	39 81       	ldd	r19, Y+1	; 0x01
 6b0:	26 0f       	add	r18, r22
 6b2:	37 1f       	adc	r19, r23
 6b4:	2e 5f       	subi	r18, 0xFE	; 254
 6b6:	3f 4f       	sbci	r19, 0xFF	; 255
 6b8:	31 83       	std	Z+1, r19	; 0x01
 6ba:	20 83       	st	Z, r18
 6bc:	8a 81       	ldd	r24, Y+2	; 0x02
 6be:	9b 81       	ldd	r25, Y+3	; 0x03
 6c0:	93 83       	std	Z+3, r25	; 0x03
 6c2:	82 83       	std	Z+2, r24	; 0x02
 6c4:	45 2b       	or	r20, r21
 6c6:	29 f4       	brne	.+10     	; 0x6d2 <free+0xa2>
 6c8:	f0 93 11 01 	sts	0x0111, r31	; 0x800111 <__flp+0x1>
 6cc:	e0 93 10 01 	sts	0x0110, r30	; 0x800110 <__flp>
 6d0:	42 c0       	rjmp	.+132    	; 0x756 <free+0x126>
 6d2:	13 96       	adiw	r26, 0x03	; 3
 6d4:	fc 93       	st	X, r31
 6d6:	ee 93       	st	-X, r30
 6d8:	12 97       	sbiw	r26, 0x02	; 2
 6da:	ed 01       	movw	r28, r26
 6dc:	49 91       	ld	r20, Y+
 6de:	59 91       	ld	r21, Y+
 6e0:	9e 01       	movw	r18, r28
 6e2:	24 0f       	add	r18, r20
 6e4:	35 1f       	adc	r19, r21
 6e6:	e2 17       	cp	r30, r18
 6e8:	f3 07       	cpc	r31, r19
 6ea:	71 f4       	brne	.+28     	; 0x708 <free+0xd8>
 6ec:	80 81       	ld	r24, Z
 6ee:	91 81       	ldd	r25, Z+1	; 0x01
 6f0:	84 0f       	add	r24, r20
 6f2:	95 1f       	adc	r25, r21
 6f4:	02 96       	adiw	r24, 0x02	; 2
 6f6:	11 96       	adiw	r26, 0x01	; 1
 6f8:	9c 93       	st	X, r25
 6fa:	8e 93       	st	-X, r24
 6fc:	82 81       	ldd	r24, Z+2	; 0x02
 6fe:	93 81       	ldd	r25, Z+3	; 0x03
 700:	13 96       	adiw	r26, 0x03	; 3
 702:	9c 93       	st	X, r25
 704:	8e 93       	st	-X, r24
 706:	12 97       	sbiw	r26, 0x02	; 2
 708:	e0 e0       	ldi	r30, 0x00	; 0
 70a:	f0 e0       	ldi	r31, 0x00	; 0
 70c:	d8 01       	movw	r26, r16
 70e:	12 96       	adiw	r26, 0x02	; 2
 710:	8d 91       	ld	r24, X+
 712:	9c 91       	ld	r25, X
 714:	13 97       	sbiw	r26, 0x03	; 3
 716:	00 97       	sbiw	r24, 0x00	; 0
 718:	19 f0       	breq	.+6      	; 0x720 <free+0xf0>
 71a:	f8 01       	movw	r30, r16
 71c:	8c 01       	movw	r16, r24
 71e:	f6 cf       	rjmp	.-20     	; 0x70c <free+0xdc>
 720:	8d 91       	ld	r24, X+
 722:	9c 91       	ld	r25, X
 724:	98 01       	movw	r18, r16
 726:	2e 5f       	subi	r18, 0xFE	; 254
 728:	3f 4f       	sbci	r19, 0xFF	; 255
 72a:	82 0f       	add	r24, r18
 72c:	93 1f       	adc	r25, r19
 72e:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__brkval>
 732:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__brkval+0x1>
 736:	28 17       	cp	r18, r24
 738:	39 07       	cpc	r19, r25
 73a:	69 f4       	brne	.+26     	; 0x756 <free+0x126>
 73c:	30 97       	sbiw	r30, 0x00	; 0
 73e:	29 f4       	brne	.+10     	; 0x74a <free+0x11a>
 740:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__flp+0x1>
 744:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__flp>
 748:	02 c0       	rjmp	.+4      	; 0x74e <free+0x11e>
 74a:	13 82       	std	Z+3, r1	; 0x03
 74c:	12 82       	std	Z+2, r1	; 0x02
 74e:	10 93 0f 01 	sts	0x010F, r17	; 0x80010f <__brkval+0x1>
 752:	00 93 0e 01 	sts	0x010E, r16	; 0x80010e <__brkval>
 756:	df 91       	pop	r29
 758:	cf 91       	pop	r28
 75a:	1f 91       	pop	r17
 75c:	0f 91       	pop	r16
 75e:	08 95       	ret

00000760 <_exit>:
 760:	f8 94       	cli

00000762 <__stop_program>:
 762:	ff cf       	rjmp	.-2      	; 0x762 <__stop_program>
