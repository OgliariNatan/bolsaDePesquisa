
why_not.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000730  000007c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000730  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010c  0080010c  000007d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000800  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019b6  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000989  00000000  00000000  000022ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000088a  00000000  00000000  00002c77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000030c  00000000  00000000  00003504  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000668  00000000  00000000  00003810  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e31  00000000  00000000  00003e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004ca9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e3       	ldi	r30, 0x30	; 48
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  9e:	0c 94 96 03 	jmp	0x72c	; 0x72c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup_rf>:
// setup timer to trigger interrupt every second when at 1MHz
void setup_timer(void) {
	TCCR1B |= _BV(WGM12);
	TIMSK1 |= _BV(OCIE1A);
	OCR1A = 15624;
	TCCR1B |= _BV(CS10) | _BV(CS11);
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	0e 94 cd 00 	call	0x19a	; 0x19a <nRF24L01_init>
  ae:	ec 01       	movw	r28, r24
  b0:	85 e2       	ldi	r24, 0x25	; 37
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	99 83       	std	Y+1, r25	; 0x01
  b6:	88 83       	st	Y, r24
  b8:	22 e0       	ldi	r18, 0x02	; 2
  ba:	2a 83       	std	Y+2, r18	; 0x02
  bc:	9c 83       	std	Y+4, r25	; 0x04
  be:	8b 83       	std	Y+3, r24	; 0x03
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	2d 83       	std	Y+5, r18	; 0x05
  c4:	9f 83       	std	Y+7, r25	; 0x07
  c6:	8e 83       	std	Y+6, r24	; 0x06
  c8:	25 e0       	ldi	r18, 0x05	; 5
  ca:	28 87       	std	Y+8, r18	; 0x08
  cc:	9a 87       	std	Y+10, r25	; 0x0a
  ce:	89 87       	std	Y+9, r24	; 0x09
  d0:	23 e0       	ldi	r18, 0x03	; 3
  d2:	2b 87       	std	Y+11, r18	; 0x0b
  d4:	9d 87       	std	Y+13, r25	; 0x0d
  d6:	8c 87       	std	Y+12, r24	; 0x0c
  d8:	84 e0       	ldi	r24, 0x04	; 4
  da:	8e 87       	std	Y+14, r24	; 0x0e
  dc:	e9 e6       	ldi	r30, 0x69	; 105
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	80 83       	st	Z, r24
  e6:	e8 9a       	sbi	0x1d, 0	; 29
  e8:	ce 01       	movw	r24, r28
  ea:	0e 94 84 01 	call	0x308	; 0x308 <nRF24L01_begin>
  ee:	ce 01       	movw	r24, r28
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <main>:
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
  fe:	2a 97       	sbiw	r28, 0x0a	; 10
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	f8 94       	cli
 104:	de bf       	out	0x3e, r29	; 62
 106:	0f be       	out	0x3f, r0	; 63
 108:	cd bf       	out	0x3d, r28	; 61
 10a:	85 e0       	ldi	r24, 0x05	; 5
 10c:	e6 e0       	ldi	r30, 0x06	; 6
 10e:	f1 e0       	ldi	r31, 0x01	; 1
 110:	de 01       	movw	r26, r28
 112:	11 96       	adiw	r26, 0x01	; 1
 114:	01 90       	ld	r0, Z+
 116:	0d 92       	st	X+, r0
 118:	8a 95       	dec	r24
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x1e>
 11c:	78 94       	sei
 11e:	0e 94 53 00 	call	0xa6	; 0xa6 <setup_rf>
 122:	8c 01       	movw	r16, r24
 124:	ae 01       	movw	r20, r28
 126:	4f 5f       	subi	r20, 0xFF	; 255
 128:	5f 4f       	sbci	r21, 0xFF	; 255
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	0e 94 19 01 	call	0x232	; 0x232 <nRF24L01_listen>
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	ae 01       	movw	r20, r28
 138:	4a 5f       	subi	r20, 0xFA	; 250
 13a:	5f 4f       	sbci	r21, 0xFF	; 255
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	c8 01       	movw	r24, r16
 140:	0e 94 16 01 	call	0x22c	; 0x22c <nRF24L01_read_register>
 144:	ff cf       	rjmp	.-2      	; 0x144 <main+0x4e>

00000146 <__vector_11>:
}

// each one second interrupt
ISR(TIMER1_COMPA_vect) {
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	8f 93       	push	r24
	send_message = true;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
}
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <__vector_1>:

// nRF24L01 interrupt
ISR(INT0_vect) {
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	8f 93       	push	r24
	rf_interrupt = true;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <rf_interrupt>
}
 176:	8f 91       	pop	r24
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <copy_address>:
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
    config &= ~_BV(PRIM_RX);
    nRF24L01_write_register(rf, CONFIG, &config, 1);
    set_high(rf->ce);
}
 182:	fc 01       	movw	r30, r24
 184:	a6 2f       	mov	r26, r22
 186:	b7 2f       	mov	r27, r23
 188:	9c 01       	movw	r18, r24
 18a:	2b 5f       	subi	r18, 0xFB	; 251
 18c:	3f 4f       	sbci	r19, 0xFF	; 255
 18e:	91 91       	ld	r25, Z+
 190:	9d 93       	st	X+, r25
 192:	e2 17       	cp	r30, r18
 194:	f3 07       	cpc	r31, r19
 196:	d9 f7       	brne	.-10     	; 0x18e <copy_address+0xc>
 198:	08 95       	ret

0000019a <nRF24L01_init>:
 19a:	80 e1       	ldi	r24, 0x10	; 16
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <malloc>
 1a2:	20 e1       	ldi	r18, 0x10	; 16
 1a4:	fc 01       	movw	r30, r24
 1a6:	11 92       	st	Z+, r1
 1a8:	2a 95       	dec	r18
 1aa:	e9 f7       	brne	.-6      	; 0x1a6 <nRF24L01_init+0xc>
 1ac:	08 95       	ret

000001ae <nRF24L01_send_command>:
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	ec 01       	movw	r28, r24
 1b4:	da 01       	movw	r26, r20
 1b6:	e8 81       	ld	r30, Y
 1b8:	f9 81       	ldd	r31, Y+1	; 0x01
 1ba:	50 81       	ld	r21, Z
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0a 80       	ldd	r0, Y+2	; 0x02
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <nRF24L01_send_command+0x1a>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	0a 94       	dec	r0
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <nRF24L01_send_command+0x16>
 1cc:	80 95       	com	r24
 1ce:	85 23       	and	r24, r21
 1d0:	80 83       	st	Z, r24
 1d2:	6e bd       	out	0x2e, r22	; 46
 1d4:	0d b4       	in	r0, 0x2d	; 45
 1d6:	07 fe       	sbrs	r0, 7
 1d8:	fd cf       	rjmp	.-6      	; 0x1d4 <nRF24L01_send_command+0x26>
 1da:	8e b5       	in	r24, 0x2e	; 46
 1dc:	8f 87       	std	Y+15, r24	; 0x0f
 1de:	21 15       	cp	r18, r1
 1e0:	31 05       	cpc	r19, r1
 1e2:	79 f0       	breq	.+30     	; 0x202 <nRF24L01_send_command+0x54>
 1e4:	fd 01       	movw	r30, r26
 1e6:	2a 0f       	add	r18, r26
 1e8:	3b 1f       	adc	r19, r27
 1ea:	df 01       	movw	r26, r30
 1ec:	90 81       	ld	r25, Z
 1ee:	9e bd       	out	0x2e, r25	; 46
 1f0:	0d b4       	in	r0, 0x2d	; 45
 1f2:	07 fe       	sbrs	r0, 7
 1f4:	fd cf       	rjmp	.-6      	; 0x1f0 <nRF24L01_send_command+0x42>
 1f6:	9e b5       	in	r25, 0x2e	; 46
 1f8:	9c 93       	st	X, r25
 1fa:	31 96       	adiw	r30, 0x01	; 1
 1fc:	e2 17       	cp	r30, r18
 1fe:	f3 07       	cpc	r31, r19
 200:	a1 f7       	brne	.-24     	; 0x1ea <nRF24L01_send_command+0x3c>
 202:	e8 81       	ld	r30, Y
 204:	f9 81       	ldd	r31, Y+1	; 0x01
 206:	20 81       	ld	r18, Z
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0a 80       	ldd	r0, Y+2	; 0x02
 20e:	02 c0       	rjmp	.+4      	; 0x214 <nRF24L01_send_command+0x66>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	0a 94       	dec	r0
 216:	e2 f7       	brpl	.-8      	; 0x210 <nRF24L01_send_command+0x62>
 218:	82 2b       	or	r24, r18
 21a:	80 83       	st	Z, r24
 21c:	8f 85       	ldd	r24, Y+15	; 0x0f
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <nRF24L01_write_register>:
 224:	60 62       	ori	r22, 0x20	; 32
 226:	0e 94 d7 00 	call	0x1ae	; 0x1ae <nRF24L01_send_command>
 22a:	08 95       	ret

0000022c <nRF24L01_read_register>:
 22c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <nRF24L01_send_command>
 230:	08 95       	ret

00000232 <nRF24L01_listen>:
 232:	df 92       	push	r13
 234:	ef 92       	push	r14
 236:	ff 92       	push	r15
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	00 d0       	rcall	.+0      	; 0x242 <nRF24L01_listen+0x10>
 242:	00 d0       	rcall	.+0      	; 0x244 <nRF24L01_listen+0x12>
 244:	00 d0       	rcall	.+0      	; 0x246 <nRF24L01_listen+0x14>
 246:	cd b7       	in	r28, 0x3d	; 61
 248:	de b7       	in	r29, 0x3e	; 62
 24a:	7c 01       	movw	r14, r24
 24c:	d6 2e       	mov	r13, r22
 24e:	ca 01       	movw	r24, r20
 250:	be 01       	movw	r22, r28
 252:	6f 5f       	subi	r22, 0xFF	; 255
 254:	7f 4f       	sbci	r23, 0xFF	; 255
 256:	0e 94 c1 00 	call	0x182	; 0x182 <copy_address>
 25a:	6a e0       	ldi	r22, 0x0A	; 10
 25c:	6d 0d       	add	r22, r13
 25e:	25 e0       	ldi	r18, 0x05	; 5
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	ae 01       	movw	r20, r28
 264:	4f 5f       	subi	r20, 0xFF	; 255
 266:	5f 4f       	sbci	r21, 0xFF	; 255
 268:	c7 01       	movw	r24, r14
 26a:	0e 94 12 01 	call	0x224	; 0x224 <nRF24L01_write_register>
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	ae 01       	movw	r20, r28
 274:	4a 5f       	subi	r20, 0xFA	; 250
 276:	5f 4f       	sbci	r21, 0xFF	; 255
 278:	62 e0       	ldi	r22, 0x02	; 2
 27a:	c7 01       	movw	r24, r14
 27c:	0e 94 16 01 	call	0x22c	; 0x22c <nRF24L01_read_register>
 280:	01 e0       	ldi	r16, 0x01	; 1
 282:	10 e0       	ldi	r17, 0x00	; 0
 284:	c8 01       	movw	r24, r16
 286:	02 c0       	rjmp	.+4      	; 0x28c <nRF24L01_listen+0x5a>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	da 94       	dec	r13
 28e:	e2 f7       	brpl	.-8      	; 0x288 <nRF24L01_listen+0x56>
 290:	9e 81       	ldd	r25, Y+6	; 0x06
 292:	89 2b       	or	r24, r25
 294:	8e 83       	std	Y+6, r24	; 0x06
 296:	21 e0       	ldi	r18, 0x01	; 1
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	ae 01       	movw	r20, r28
 29c:	4a 5f       	subi	r20, 0xFA	; 250
 29e:	5f 4f       	sbci	r21, 0xFF	; 255
 2a0:	62 e0       	ldi	r22, 0x02	; 2
 2a2:	c7 01       	movw	r24, r14
 2a4:	0e 94 12 01 	call	0x224	; 0x224 <nRF24L01_write_register>
 2a8:	d7 01       	movw	r26, r14
 2aa:	13 96       	adiw	r26, 0x03	; 3
 2ac:	ed 91       	ld	r30, X+
 2ae:	fc 91       	ld	r31, X
 2b0:	14 97       	sbiw	r26, 0x04	; 4
 2b2:	80 81       	ld	r24, Z
 2b4:	15 96       	adiw	r26, 0x05	; 5
 2b6:	0c 90       	ld	r0, X
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <nRF24L01_listen+0x8c>
 2ba:	00 0f       	add	r16, r16
 2bc:	11 1f       	adc	r17, r17
 2be:	0a 94       	dec	r0
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <nRF24L01_listen+0x88>
 2c2:	08 2b       	or	r16, r24
 2c4:	00 83       	st	Z, r16
 2c6:	26 96       	adiw	r28, 0x06	; 6
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	f8 94       	cli
 2cc:	de bf       	out	0x3e, r29	; 62
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	cd bf       	out	0x3d, r28	; 61
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	1f 91       	pop	r17
 2d8:	0f 91       	pop	r16
 2da:	ff 90       	pop	r15
 2dc:	ef 90       	pop	r14
 2de:	df 90       	pop	r13
 2e0:	08 95       	ret

000002e2 <nRF24L01_clear_interrupts>:

void nRF24L01_clear_interrupts(nRF24L01 *rf) {
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	1f 92       	push	r1
 2e8:	cd b7       	in	r28, 0x3d	; 61
 2ea:	de b7       	in	r29, 0x3e	; 62
    uint8_t data = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
 2ec:	20 e7       	ldi	r18, 0x70	; 112
 2ee:	29 83       	std	Y+1, r18	; 0x01
    nRF24L01_write_register(rf, STATUS, &data, 1);
 2f0:	21 e0       	ldi	r18, 0x01	; 1
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	ae 01       	movw	r20, r28
 2f6:	4f 5f       	subi	r20, 0xFF	; 255
 2f8:	5f 4f       	sbci	r21, 0xFF	; 255
 2fa:	67 e0       	ldi	r22, 0x07	; 7
 2fc:	0e 94 12 01 	call	0x224	; 0x224 <nRF24L01_write_register>
}
 300:	0f 90       	pop	r0
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <nRF24L01_begin>:
    nRF24L01 *rf = malloc(sizeof(nRF24L01));
    memset(rf, 0, sizeof(nRF24L01));
    return rf;
}

void nRF24L01_begin(nRF24L01 *rf) {
 308:	ff 92       	push	r15
 30a:	0f 93       	push	r16
 30c:	1f 93       	push	r17
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	1f 92       	push	r1
 314:	cd b7       	in	r28, 0x3d	; 61
 316:	de b7       	in	r29, 0x3e	; 62
 318:	8c 01       	movw	r16, r24
        destination[i] = source[i];
}

inline static void set_as_output(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr |= _BV(pin.pin);
 31a:	dc 01       	movw	r26, r24
 31c:	ed 91       	ld	r30, X+
 31e:	fc 91       	ld	r31, X
 320:	11 97       	sbiw	r26, 0x01	; 1
 322:	42 91       	ld	r20, -Z
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	9c 01       	movw	r18, r24
 32a:	12 96       	adiw	r26, 0x02	; 2
 32c:	0c 90       	ld	r0, X
 32e:	12 97       	sbiw	r26, 0x02	; 2
 330:	02 c0       	rjmp	.+4      	; 0x336 <nRF24L01_begin+0x2e>
 332:	22 0f       	add	r18, r18
 334:	33 1f       	adc	r19, r19
 336:	0a 94       	dec	r0
 338:	e2 f7       	brpl	.-8      	; 0x332 <nRF24L01_begin+0x2a>
 33a:	24 2b       	or	r18, r20
 33c:	20 83       	st	Z, r18
 33e:	13 96       	adiw	r26, 0x03	; 3
 340:	ed 91       	ld	r30, X+
 342:	fc 91       	ld	r31, X
 344:	14 97       	sbiw	r26, 0x04	; 4
 346:	42 91       	ld	r20, -Z
 348:	9c 01       	movw	r18, r24
 34a:	15 96       	adiw	r26, 0x05	; 5
 34c:	0c 90       	ld	r0, X
 34e:	15 97       	sbiw	r26, 0x05	; 5
 350:	02 c0       	rjmp	.+4      	; 0x356 <nRF24L01_begin+0x4e>
 352:	22 0f       	add	r18, r18
 354:	33 1f       	adc	r19, r19
 356:	0a 94       	dec	r0
 358:	e2 f7       	brpl	.-8      	; 0x352 <nRF24L01_begin+0x4a>
 35a:	24 2b       	or	r18, r20
 35c:	20 83       	st	Z, r18
 35e:	ed 91       	ld	r30, X+
 360:	fc 91       	ld	r31, X
 362:	11 97       	sbiw	r26, 0x01	; 1
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
}

inline static void set_high(gpio_pin pin) {
    *pin.port |= _BV(pin.pin);
 364:	40 81       	ld	r20, Z
 366:	9c 01       	movw	r18, r24
 368:	12 96       	adiw	r26, 0x02	; 2
 36a:	0c 90       	ld	r0, X
 36c:	12 97       	sbiw	r26, 0x02	; 2
 36e:	02 c0       	rjmp	.+4      	; 0x374 <nRF24L01_begin+0x6c>
 370:	22 0f       	add	r18, r18
 372:	33 1f       	adc	r19, r19
 374:	0a 94       	dec	r0
 376:	e2 f7       	brpl	.-8      	; 0x370 <nRF24L01_begin+0x68>
 378:	24 2b       	or	r18, r20
 37a:	20 83       	st	Z, r18
 37c:	13 96       	adiw	r26, 0x03	; 3
 37e:	ed 91       	ld	r30, X+
 380:	fc 91       	ld	r31, X
 382:	14 97       	sbiw	r26, 0x04	; 4
}

inline static void set_low(gpio_pin pin) {
    *pin.port &= ~_BV(pin.pin);
 384:	30 81       	ld	r19, Z
 386:	ac 01       	movw	r20, r24
 388:	15 96       	adiw	r26, 0x05	; 5
 38a:	0c 90       	ld	r0, X
 38c:	15 97       	sbiw	r26, 0x05	; 5
 38e:	02 c0       	rjmp	.+4      	; 0x394 <nRF24L01_begin+0x8c>
 390:	44 0f       	add	r20, r20
 392:	55 1f       	adc	r21, r21
 394:	0a 94       	dec	r0
 396:	e2 f7       	brpl	.-8      	; 0x390 <nRF24L01_begin+0x88>
 398:	24 2f       	mov	r18, r20
 39a:	20 95       	com	r18
 39c:	23 23       	and	r18, r19
 39e:	20 83       	st	Z, r18
}

static void spi_init(nRF24L01 *rf) {
    // set as master
    SPCR |= _BV(MSTR);
 3a0:	2c b5       	in	r18, 0x2c	; 44
 3a2:	20 61       	ori	r18, 0x10	; 16
 3a4:	2c bd       	out	0x2c, r18	; 44
    // enable SPI
    SPCR |= _BV(SPE);
 3a6:	2c b5       	in	r18, 0x2c	; 44
 3a8:	20 64       	ori	r18, 0x40	; 64
 3aa:	2c bd       	out	0x2c, r18	; 44
        destination[i] = source[i];
}

inline static void set_as_output(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr |= _BV(pin.pin);
 3ac:	16 96       	adiw	r26, 0x06	; 6
 3ae:	ed 91       	ld	r30, X+
 3b0:	fc 91       	ld	r31, X
 3b2:	17 97       	sbiw	r26, 0x07	; 7
 3b4:	42 91       	ld	r20, -Z
 3b6:	9c 01       	movw	r18, r24
 3b8:	18 96       	adiw	r26, 0x08	; 8
 3ba:	0c 90       	ld	r0, X
 3bc:	18 97       	sbiw	r26, 0x08	; 8
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <nRF24L01_begin+0xbc>
 3c0:	22 0f       	add	r18, r18
 3c2:	33 1f       	adc	r19, r19
 3c4:	0a 94       	dec	r0
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <nRF24L01_begin+0xb8>
 3c8:	24 2b       	or	r18, r20
 3ca:	20 83       	st	Z, r18
 3cc:	19 96       	adiw	r26, 0x09	; 9
 3ce:	ed 91       	ld	r30, X+
 3d0:	fc 91       	ld	r31, X
 3d2:	1a 97       	sbiw	r26, 0x0a	; 10
 3d4:	42 91       	ld	r20, -Z
 3d6:	9c 01       	movw	r18, r24
 3d8:	1b 96       	adiw	r26, 0x0b	; 11
 3da:	0c 90       	ld	r0, X
 3dc:	1b 97       	sbiw	r26, 0x0b	; 11
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <nRF24L01_begin+0xdc>
 3e0:	22 0f       	add	r18, r18
 3e2:	33 1f       	adc	r19, r19
 3e4:	0a 94       	dec	r0
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <nRF24L01_begin+0xd8>
 3e8:	24 2b       	or	r18, r20
 3ea:	20 83       	st	Z, r18
}

inline static void set_as_input(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
 3ec:	1c 96       	adiw	r26, 0x0c	; 12
 3ee:	ed 91       	ld	r30, X+
 3f0:	fc 91       	ld	r31, X
 3f2:	1d 97       	sbiw	r26, 0x0d	; 13
 3f4:	22 91       	ld	r18, -Z
 3f6:	1e 96       	adiw	r26, 0x0e	; 14
 3f8:	0c 90       	ld	r0, X
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	0a 94       	dec	r0
 402:	e2 f7       	brpl	.-8      	; 0x3fc <nRF24L01_begin+0xf4>
 404:	80 95       	com	r24
 406:	82 23       	and	r24, r18
 408:	80 83       	st	Z, r24
    // MISO pin automatically overrides to input
    set_as_output(rf->sck);
    set_as_output(rf->mosi);
    set_as_input(rf->miso);
    // SPI mode 0: Clock Polarity CPOL = 0, Clock Phase CPHA = 0
    SPCR &= ~_BV(CPOL);
 40a:	8c b5       	in	r24, 0x2c	; 44
 40c:	87 7f       	andi	r24, 0xF7	; 247
 40e:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~_BV(CPHA);
 410:	8c b5       	in	r24, 0x2c	; 44
 412:	8b 7f       	andi	r24, 0xFB	; 251
 414:	8c bd       	out	0x2c, r24	; 44
    // Clock 2X speed
    SPCR &= ~_BV(SPR0);
 416:	8c b5       	in	r24, 0x2c	; 44
 418:	8e 7f       	andi	r24, 0xFE	; 254
 41a:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~_BV(SPR1);
 41c:	8c b5       	in	r24, 0x2c	; 44
 41e:	8d 7f       	andi	r24, 0xFD	; 253
 420:	8c bd       	out	0x2c, r24	; 44
    SPSR |= _BV(SPI2X);
 422:	8d b5       	in	r24, 0x2d	; 45
 424:	81 60       	ori	r24, 0x01	; 1
 426:	8d bd       	out	0x2d, r24	; 45
    // most significant first (MSB)
    SPCR &= ~_BV(DORD);
 428:	8c b5       	in	r24, 0x2c	; 44
 42a:	8f 7d       	andi	r24, 0xDF	; 223
 42c:	8c bd       	out	0x2c, r24	; 44
    set_high(rf->ss);
    set_low(rf->ce);

    spi_init(rf);

    nRF24L01_send_command(rf, FLUSH_RX, NULL, 0);
 42e:	20 e0       	ldi	r18, 0x00	; 0
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	40 e0       	ldi	r20, 0x00	; 0
 434:	50 e0       	ldi	r21, 0x00	; 0
 436:	62 ee       	ldi	r22, 0xE2	; 226
 438:	c8 01       	movw	r24, r16
 43a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <nRF24L01_send_command>
    nRF24L01_send_command(rf, FLUSH_TX, NULL, 0);
 43e:	20 e0       	ldi	r18, 0x00	; 0
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	40 e0       	ldi	r20, 0x00	; 0
 444:	50 e0       	ldi	r21, 0x00	; 0
 446:	61 ee       	ldi	r22, 0xE1	; 225
 448:	c8 01       	movw	r24, r16
 44a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <nRF24L01_send_command>
    nRF24L01_clear_interrupts(rf);
 44e:	c8 01       	movw	r24, r16
 450:	0e 94 71 01 	call	0x2e2	; 0x2e2 <nRF24L01_clear_interrupts>

    uint8_t data;
    data = _BV(EN_CRC) | _BV(CRCO) | _BV(PWR_UP) | _BV(PRIM_RX);
 454:	8f e0       	ldi	r24, 0x0F	; 15
 456:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, CONFIG, &data, 1);
 458:	21 e0       	ldi	r18, 0x01	; 1
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	ae 01       	movw	r20, r28
 45e:	4f 5f       	subi	r20, 0xFF	; 255
 460:	5f 4f       	sbci	r21, 0xFF	; 255
 462:	60 e0       	ldi	r22, 0x00	; 0
 464:	c8 01       	movw	r24, r16
 466:	0e 94 12 01 	call	0x224	; 0x224 <nRF24L01_write_register>

    // enable Auto Acknowlegde on all pipes
    data = _BV(ENAA_P0) | _BV(ENAA_P1) | _BV(ENAA_P2)
 46a:	0f 2e       	mov	r0, r31
 46c:	ff e3       	ldi	r31, 0x3F	; 63
 46e:	ff 2e       	mov	r15, r31
 470:	f0 2d       	mov	r31, r0
 472:	f9 82       	std	Y+1, r15	; 0x01
         | _BV(ENAA_P3) | _BV(ENAA_P4) | _BV(ENAA_P5);
    nRF24L01_write_register(rf, EN_AA, &data, 1);
 474:	21 e0       	ldi	r18, 0x01	; 1
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	ae 01       	movw	r20, r28
 47a:	4f 5f       	subi	r20, 0xFF	; 255
 47c:	5f 4f       	sbci	r21, 0xFF	; 255
 47e:	61 e0       	ldi	r22, 0x01	; 1
 480:	c8 01       	movw	r24, r16
 482:	0e 94 12 01 	call	0x224	; 0x224 <nRF24L01_write_register>

    // enable Dynamic Payload on al pipes
    data = _BV(DPL_P0) | _BV(DPL_P1) | _BV(DPL_P2)
 486:	f9 82       	std	Y+1, r15	; 0x01
         | _BV(DPL_P3) | _BV(DPL_P4) | _BV(DPL_P5);
    nRF24L01_write_register(rf, DYNPD, &data, 1);
 488:	21 e0       	ldi	r18, 0x01	; 1
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	ae 01       	movw	r20, r28
 48e:	4f 5f       	subi	r20, 0xFF	; 255
 490:	5f 4f       	sbci	r21, 0xFF	; 255
 492:	6c e1       	ldi	r22, 0x1C	; 28
 494:	c8 01       	movw	r24, r16
 496:	0e 94 12 01 	call	0x224	; 0x224 <nRF24L01_write_register>

    // enable Dynamic Payload (global)
    data = _BV(EN_DPL);
 49a:	84 e0       	ldi	r24, 0x04	; 4
 49c:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, FEATURE, &data, 1);
 49e:	21 e0       	ldi	r18, 0x01	; 1
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	ae 01       	movw	r20, r28
 4a4:	4f 5f       	subi	r20, 0xFF	; 255
 4a6:	5f 4f       	sbci	r21, 0xFF	; 255
 4a8:	6d e1       	ldi	r22, 0x1D	; 29
 4aa:	c8 01       	movw	r24, r16
 4ac:	0e 94 12 01 	call	0x224	; 0x224 <nRF24L01_write_register>

    // disable all rx addresses
    data = 0;
 4b0:	19 82       	std	Y+1, r1	; 0x01
    nRF24L01_write_register(rf, EN_RXADDR, &data, 1);
 4b2:	21 e0       	ldi	r18, 0x01	; 1
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	ae 01       	movw	r20, r28
 4b8:	4f 5f       	subi	r20, 0xFF	; 255
 4ba:	5f 4f       	sbci	r21, 0xFF	; 255
 4bc:	62 e0       	ldi	r22, 0x02	; 2
 4be:	c8 01       	movw	r24, r16
 4c0:	0e 94 12 01 	call	0x224	; 0x224 <nRF24L01_write_register>
}
 4c4:	0f 90       	pop	r0
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	1f 91       	pop	r17
 4cc:	0f 91       	pop	r16
 4ce:	ff 90       	pop	r15
 4d0:	08 95       	ret

000004d2 <malloc>:
 4d2:	cf 93       	push	r28
 4d4:	df 93       	push	r29
 4d6:	82 30       	cpi	r24, 0x02	; 2
 4d8:	91 05       	cpc	r25, r1
 4da:	10 f4       	brcc	.+4      	; 0x4e0 <malloc+0xe>
 4dc:	82 e0       	ldi	r24, 0x02	; 2
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__flp>
 4e4:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <__flp+0x1>
 4e8:	20 e0       	ldi	r18, 0x00	; 0
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	c0 e0       	ldi	r28, 0x00	; 0
 4ee:	d0 e0       	ldi	r29, 0x00	; 0
 4f0:	30 97       	sbiw	r30, 0x00	; 0
 4f2:	11 f1       	breq	.+68     	; 0x538 <malloc+0x66>
 4f4:	40 81       	ld	r20, Z
 4f6:	51 81       	ldd	r21, Z+1	; 0x01
 4f8:	48 17       	cp	r20, r24
 4fa:	59 07       	cpc	r21, r25
 4fc:	c0 f0       	brcs	.+48     	; 0x52e <malloc+0x5c>
 4fe:	48 17       	cp	r20, r24
 500:	59 07       	cpc	r21, r25
 502:	61 f4       	brne	.+24     	; 0x51c <malloc+0x4a>
 504:	82 81       	ldd	r24, Z+2	; 0x02
 506:	93 81       	ldd	r25, Z+3	; 0x03
 508:	20 97       	sbiw	r28, 0x00	; 0
 50a:	19 f0       	breq	.+6      	; 0x512 <malloc+0x40>
 50c:	9b 83       	std	Y+3, r25	; 0x03
 50e:	8a 83       	std	Y+2, r24	; 0x02
 510:	2b c0       	rjmp	.+86     	; 0x568 <malloc+0x96>
 512:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__flp+0x1>
 516:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__flp>
 51a:	26 c0       	rjmp	.+76     	; 0x568 <malloc+0x96>
 51c:	21 15       	cp	r18, r1
 51e:	31 05       	cpc	r19, r1
 520:	19 f0       	breq	.+6      	; 0x528 <malloc+0x56>
 522:	42 17       	cp	r20, r18
 524:	53 07       	cpc	r21, r19
 526:	18 f4       	brcc	.+6      	; 0x52e <malloc+0x5c>
 528:	9a 01       	movw	r18, r20
 52a:	be 01       	movw	r22, r28
 52c:	df 01       	movw	r26, r30
 52e:	ef 01       	movw	r28, r30
 530:	02 80       	ldd	r0, Z+2	; 0x02
 532:	f3 81       	ldd	r31, Z+3	; 0x03
 534:	e0 2d       	mov	r30, r0
 536:	dc cf       	rjmp	.-72     	; 0x4f0 <malloc+0x1e>
 538:	21 15       	cp	r18, r1
 53a:	31 05       	cpc	r19, r1
 53c:	09 f1       	breq	.+66     	; 0x580 <malloc+0xae>
 53e:	28 1b       	sub	r18, r24
 540:	39 0b       	sbc	r19, r25
 542:	24 30       	cpi	r18, 0x04	; 4
 544:	31 05       	cpc	r19, r1
 546:	90 f4       	brcc	.+36     	; 0x56c <malloc+0x9a>
 548:	12 96       	adiw	r26, 0x02	; 2
 54a:	8d 91       	ld	r24, X+
 54c:	9c 91       	ld	r25, X
 54e:	13 97       	sbiw	r26, 0x03	; 3
 550:	61 15       	cp	r22, r1
 552:	71 05       	cpc	r23, r1
 554:	21 f0       	breq	.+8      	; 0x55e <malloc+0x8c>
 556:	fb 01       	movw	r30, r22
 558:	93 83       	std	Z+3, r25	; 0x03
 55a:	82 83       	std	Z+2, r24	; 0x02
 55c:	04 c0       	rjmp	.+8      	; 0x566 <malloc+0x94>
 55e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__flp+0x1>
 562:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__flp>
 566:	fd 01       	movw	r30, r26
 568:	32 96       	adiw	r30, 0x02	; 2
 56a:	44 c0       	rjmp	.+136    	; 0x5f4 <malloc+0x122>
 56c:	fd 01       	movw	r30, r26
 56e:	e2 0f       	add	r30, r18
 570:	f3 1f       	adc	r31, r19
 572:	81 93       	st	Z+, r24
 574:	91 93       	st	Z+, r25
 576:	22 50       	subi	r18, 0x02	; 2
 578:	31 09       	sbc	r19, r1
 57a:	2d 93       	st	X+, r18
 57c:	3c 93       	st	X, r19
 57e:	3a c0       	rjmp	.+116    	; 0x5f4 <malloc+0x122>
 580:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__brkval>
 584:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__brkval+0x1>
 588:	23 2b       	or	r18, r19
 58a:	41 f4       	brne	.+16     	; 0x59c <malloc+0xca>
 58c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 590:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 594:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <__brkval+0x1>
 598:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <__brkval>
 59c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 5a0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 5a4:	21 15       	cp	r18, r1
 5a6:	31 05       	cpc	r19, r1
 5a8:	41 f4       	brne	.+16     	; 0x5ba <malloc+0xe8>
 5aa:	2d b7       	in	r18, 0x3d	; 61
 5ac:	3e b7       	in	r19, 0x3e	; 62
 5ae:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 5b2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 5b6:	24 1b       	sub	r18, r20
 5b8:	35 0b       	sbc	r19, r21
 5ba:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <__brkval>
 5be:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <__brkval+0x1>
 5c2:	e2 17       	cp	r30, r18
 5c4:	f3 07       	cpc	r31, r19
 5c6:	a0 f4       	brcc	.+40     	; 0x5f0 <malloc+0x11e>
 5c8:	2e 1b       	sub	r18, r30
 5ca:	3f 0b       	sbc	r19, r31
 5cc:	28 17       	cp	r18, r24
 5ce:	39 07       	cpc	r19, r25
 5d0:	78 f0       	brcs	.+30     	; 0x5f0 <malloc+0x11e>
 5d2:	ac 01       	movw	r20, r24
 5d4:	4e 5f       	subi	r20, 0xFE	; 254
 5d6:	5f 4f       	sbci	r21, 0xFF	; 255
 5d8:	24 17       	cp	r18, r20
 5da:	35 07       	cpc	r19, r21
 5dc:	48 f0       	brcs	.+18     	; 0x5f0 <malloc+0x11e>
 5de:	4e 0f       	add	r20, r30
 5e0:	5f 1f       	adc	r21, r31
 5e2:	50 93 0f 01 	sts	0x010F, r21	; 0x80010f <__brkval+0x1>
 5e6:	40 93 0e 01 	sts	0x010E, r20	; 0x80010e <__brkval>
 5ea:	81 93       	st	Z+, r24
 5ec:	91 93       	st	Z+, r25
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <malloc+0x122>
 5f0:	e0 e0       	ldi	r30, 0x00	; 0
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	cf 01       	movw	r24, r30
 5f6:	df 91       	pop	r29
 5f8:	cf 91       	pop	r28
 5fa:	08 95       	ret

000005fc <free>:
 5fc:	0f 93       	push	r16
 5fe:	1f 93       	push	r17
 600:	cf 93       	push	r28
 602:	df 93       	push	r29
 604:	00 97       	sbiw	r24, 0x00	; 0
 606:	09 f4       	brne	.+2      	; 0x60a <free+0xe>
 608:	8c c0       	rjmp	.+280    	; 0x722 <free+0x126>
 60a:	fc 01       	movw	r30, r24
 60c:	32 97       	sbiw	r30, 0x02	; 2
 60e:	13 82       	std	Z+3, r1	; 0x03
 610:	12 82       	std	Z+2, r1	; 0x02
 612:	00 91 10 01 	lds	r16, 0x0110	; 0x800110 <__flp>
 616:	10 91 11 01 	lds	r17, 0x0111	; 0x800111 <__flp+0x1>
 61a:	01 15       	cp	r16, r1
 61c:	11 05       	cpc	r17, r1
 61e:	81 f4       	brne	.+32     	; 0x640 <free+0x44>
 620:	20 81       	ld	r18, Z
 622:	31 81       	ldd	r19, Z+1	; 0x01
 624:	82 0f       	add	r24, r18
 626:	93 1f       	adc	r25, r19
 628:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__brkval>
 62c:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__brkval+0x1>
 630:	28 17       	cp	r18, r24
 632:	39 07       	cpc	r19, r25
 634:	79 f5       	brne	.+94     	; 0x694 <free+0x98>
 636:	f0 93 0f 01 	sts	0x010F, r31	; 0x80010f <__brkval+0x1>
 63a:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <__brkval>
 63e:	71 c0       	rjmp	.+226    	; 0x722 <free+0x126>
 640:	d8 01       	movw	r26, r16
 642:	40 e0       	ldi	r20, 0x00	; 0
 644:	50 e0       	ldi	r21, 0x00	; 0
 646:	ae 17       	cp	r26, r30
 648:	bf 07       	cpc	r27, r31
 64a:	50 f4       	brcc	.+20     	; 0x660 <free+0x64>
 64c:	12 96       	adiw	r26, 0x02	; 2
 64e:	2d 91       	ld	r18, X+
 650:	3c 91       	ld	r19, X
 652:	13 97       	sbiw	r26, 0x03	; 3
 654:	ad 01       	movw	r20, r26
 656:	21 15       	cp	r18, r1
 658:	31 05       	cpc	r19, r1
 65a:	09 f1       	breq	.+66     	; 0x69e <free+0xa2>
 65c:	d9 01       	movw	r26, r18
 65e:	f3 cf       	rjmp	.-26     	; 0x646 <free+0x4a>
 660:	9d 01       	movw	r18, r26
 662:	da 01       	movw	r26, r20
 664:	33 83       	std	Z+3, r19	; 0x03
 666:	22 83       	std	Z+2, r18	; 0x02
 668:	60 81       	ld	r22, Z
 66a:	71 81       	ldd	r23, Z+1	; 0x01
 66c:	86 0f       	add	r24, r22
 66e:	97 1f       	adc	r25, r23
 670:	82 17       	cp	r24, r18
 672:	93 07       	cpc	r25, r19
 674:	69 f4       	brne	.+26     	; 0x690 <free+0x94>
 676:	ec 01       	movw	r28, r24
 678:	28 81       	ld	r18, Y
 67a:	39 81       	ldd	r19, Y+1	; 0x01
 67c:	26 0f       	add	r18, r22
 67e:	37 1f       	adc	r19, r23
 680:	2e 5f       	subi	r18, 0xFE	; 254
 682:	3f 4f       	sbci	r19, 0xFF	; 255
 684:	31 83       	std	Z+1, r19	; 0x01
 686:	20 83       	st	Z, r18
 688:	8a 81       	ldd	r24, Y+2	; 0x02
 68a:	9b 81       	ldd	r25, Y+3	; 0x03
 68c:	93 83       	std	Z+3, r25	; 0x03
 68e:	82 83       	std	Z+2, r24	; 0x02
 690:	45 2b       	or	r20, r21
 692:	29 f4       	brne	.+10     	; 0x69e <free+0xa2>
 694:	f0 93 11 01 	sts	0x0111, r31	; 0x800111 <__flp+0x1>
 698:	e0 93 10 01 	sts	0x0110, r30	; 0x800110 <__flp>
 69c:	42 c0       	rjmp	.+132    	; 0x722 <free+0x126>
 69e:	13 96       	adiw	r26, 0x03	; 3
 6a0:	fc 93       	st	X, r31
 6a2:	ee 93       	st	-X, r30
 6a4:	12 97       	sbiw	r26, 0x02	; 2
 6a6:	ed 01       	movw	r28, r26
 6a8:	49 91       	ld	r20, Y+
 6aa:	59 91       	ld	r21, Y+
 6ac:	9e 01       	movw	r18, r28
 6ae:	24 0f       	add	r18, r20
 6b0:	35 1f       	adc	r19, r21
 6b2:	e2 17       	cp	r30, r18
 6b4:	f3 07       	cpc	r31, r19
 6b6:	71 f4       	brne	.+28     	; 0x6d4 <free+0xd8>
 6b8:	80 81       	ld	r24, Z
 6ba:	91 81       	ldd	r25, Z+1	; 0x01
 6bc:	84 0f       	add	r24, r20
 6be:	95 1f       	adc	r25, r21
 6c0:	02 96       	adiw	r24, 0x02	; 2
 6c2:	11 96       	adiw	r26, 0x01	; 1
 6c4:	9c 93       	st	X, r25
 6c6:	8e 93       	st	-X, r24
 6c8:	82 81       	ldd	r24, Z+2	; 0x02
 6ca:	93 81       	ldd	r25, Z+3	; 0x03
 6cc:	13 96       	adiw	r26, 0x03	; 3
 6ce:	9c 93       	st	X, r25
 6d0:	8e 93       	st	-X, r24
 6d2:	12 97       	sbiw	r26, 0x02	; 2
 6d4:	e0 e0       	ldi	r30, 0x00	; 0
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	d8 01       	movw	r26, r16
 6da:	12 96       	adiw	r26, 0x02	; 2
 6dc:	8d 91       	ld	r24, X+
 6de:	9c 91       	ld	r25, X
 6e0:	13 97       	sbiw	r26, 0x03	; 3
 6e2:	00 97       	sbiw	r24, 0x00	; 0
 6e4:	19 f0       	breq	.+6      	; 0x6ec <free+0xf0>
 6e6:	f8 01       	movw	r30, r16
 6e8:	8c 01       	movw	r16, r24
 6ea:	f6 cf       	rjmp	.-20     	; 0x6d8 <free+0xdc>
 6ec:	8d 91       	ld	r24, X+
 6ee:	9c 91       	ld	r25, X
 6f0:	98 01       	movw	r18, r16
 6f2:	2e 5f       	subi	r18, 0xFE	; 254
 6f4:	3f 4f       	sbci	r19, 0xFF	; 255
 6f6:	82 0f       	add	r24, r18
 6f8:	93 1f       	adc	r25, r19
 6fa:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__brkval>
 6fe:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__brkval+0x1>
 702:	28 17       	cp	r18, r24
 704:	39 07       	cpc	r19, r25
 706:	69 f4       	brne	.+26     	; 0x722 <free+0x126>
 708:	30 97       	sbiw	r30, 0x00	; 0
 70a:	29 f4       	brne	.+10     	; 0x716 <free+0x11a>
 70c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__flp+0x1>
 710:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__flp>
 714:	02 c0       	rjmp	.+4      	; 0x71a <free+0x11e>
 716:	13 82       	std	Z+3, r1	; 0x03
 718:	12 82       	std	Z+2, r1	; 0x02
 71a:	10 93 0f 01 	sts	0x010F, r17	; 0x80010f <__brkval+0x1>
 71e:	00 93 0e 01 	sts	0x010E, r16	; 0x80010e <__brkval>
 722:	df 91       	pop	r29
 724:	cf 91       	pop	r28
 726:	1f 91       	pop	r17
 728:	0f 91       	pop	r16
 72a:	08 95       	ret

0000072c <_exit>:
 72c:	f8 94       	cli

0000072e <__stop_program>:
 72e:	ff cf       	rjmp	.-2      	; 0x72e <__stop_program>
